# name: Flutter CI/CD

# on:
#   pull_request:
#     branches:
#       - '**'
#   push:
#     branches:
#       - 'release/*'
#       - main

# jobs:
#   checkout_and_test:
#     if: github.event_name == 'pull_request'
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v2

#       - name: Set up Flutter    
#         uses: subosito/flutter-action@v2

#       - name: Install Dependencies
#         run: flutter pub get

#       - name: Run Tests
#         run: flutter test

#       - name: Analyze Code
#         run: flutter analyze


#   build_release:
#     if: |
#       github.event_name == 'push' && startsWith(github.ref, 'refs/heads/release/')
#     runs-on: ubuntu-latest
#     steps:

#       - name: Checkout Repository
#         uses: actions/checkout@v2

#       - name: Set up Node
#         uses: actions/setup-node@v2
#         with:
#           node-version: '14'

#       - name: Get commits
#         id: get_commits
#         uses: actions/github-script@v5
#         with:
#           script: |
#             const { owner, repo } = context.repo;
#             const branch = context.ref.replace('refs/heads/', '');
#             const commits = await github.rest.repos.listCommits({
#             owner,
#             repo,
#             sha: branch,
#             });
#             const commitMessages = commits.data.map(commit => `- [${commit.sha}](https://github.com/${owner}/${repo}/commit/${commit.sha}): ${commit.commit.message}`).join('\n');
#             return `Commits:\n${commitMessages}`;
            
#       - name: Get short commit SHA
#         id: get_short_sha
#         run: echo "::set-output name=sha::$(git rev-parse --short $GITHUB_SHA)"      

#       - name: Set up Flutter
#         uses: subosito/flutter-action@v1

#       - name: Install Dependencies
#         run: flutter pub get

#       - name: Build APK
#         run: |
#           VERSION=$(grep version: pubspec.yaml | tail -1 | cut -d ":" -f 2 | xargs)
#           PACKAGE=$(cd android/app && grep applicationId build.gradle | tail -1 | cut -d '"' -f 2)
#           echo "VERSION=$VERSION" >> $GITHUB_ENV
#           echo "PACKAGE=$PACKAGE" >> $GITHUB_ENV
#           echo "${PACKAGE}-${VERSION}"
#           flutter build apk --release

#       - name: Upload APK
#         uses: actions/upload-artifact@v2
#         with:
#           name: ${{ env.PACKAGE }}-${{ env.VERSION }}
#           path: build/app/outputs/flutter-apk/app-release.apk

#       - name: Create Release
#         id: create_release
#         uses: actions/create-release@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           tag_name: ${{ steps.get_short_sha.outputs.sha }}
#           release_name: Release ${{ github.ref }}
#           body: ${{ fromJSON(steps.get_commits.outputs.result) }}
#           draft: false
#           prerelease: true

#       - name: Upload to Release Asset
#         uses: actions/upload-release-asset@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
#           asset_path: build/app/outputs/flutter-apk/app-release.apk
#           asset_name: ${{ env.PACKAGE }}-${{ env.VERSION }}.apk
#           asset_content_type: application/zip    


#   build_master:
#     if: |
#       github.event_name == 'push' && startsWith(github.ref, 'refs/heads/main')
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v2

#       - name: Set up Node
#         uses: actions/setup-node@v2
#         with:
#           node-version: '14'

#       - name: Get commits
#         id: get_commits
#         uses: actions/github-script@v5
#         with:
#           script: |
#             const { owner, repo } = context.repo;
#             const branch = context.ref.replace('refs/heads/', '');
#             const commits = await github.rest.repos.listCommits({
#             owner,
#             repo,
#             sha: branch,
#             });
#             const commitMessages = commits.data.map(commit => `- [${commit.sha}](https://github.com/${owner}/${repo}/commit/${commit.sha}): ${commit.commit.message}`).join('\n');
#             return `Commits:\n${commitMessages}`;
            
#       - name: Get short commit SHA
#         id: get_short_sha
#         run: echo "::set-output name=sha::$(git rev-parse --short $GITHUB_SHA)"  

#       - name: Set up Flutter
#         uses: subosito/flutter-action@v1

#       - name: Install Dependencies
#         run: flutter pub get

#       - name: Build APK
#         run: |
#           VERSION=$(grep version: pubspec.yaml | tail -1 | cut -d ":" -f 2 | xargs)
#           PACKAGE=$(cd android/app && grep applicationId build.gradle | tail -1 | cut -d '"' -f 2)
#           echo "VERSION=$VERSION" >> $GITHUB_ENV
#           echo "PACKAGE=$PACKAGE" >> $GITHUB_ENV
#           echo "${PACKAGE}-${VERSION}"
#           flutter build apk --release

#       - name: Upload APK
#         uses: actions/upload-artifact@v2
#         with:
#           name: ${{ env.PACKAGE }}-${{ env.VERSION }}
#           path: build/app/outputs/flutter-apk/app-release.apk

#       - name: Create Release
#         id: create_release
#         uses: actions/create-release@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           tag_name: ${{ steps.get_short_sha.outputs.sha }}
#           release_name: Release ${{ github.ref }}
#           body: ${{ fromJSON(steps.get_commits.outputs.result) }}
#           draft: false
#           prerelease: false

#       - name: Upload to Release Asset
#         uses: actions/upload-release-asset@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           upload_url: ${{ steps.create_release.outputs.upload_url }}
#           asset_path: build/app/outputs/flutter-apk/app-release.apk
#           asset_name: ${{ env.PACKAGE }}-${{ env.VERSION }}.apk
#           asset_content_type: application/zip
